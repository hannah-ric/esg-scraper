name: Deploy ESG Scraper to DigitalOcean

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: esg-scraper
  WORKING_DIR: esg-scraper

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('esg-scraper/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd ${{ env.WORKING_DIR }}
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio flake8 black==24.8.0
      
      - name: Check code formatting
        run: |
          cd ${{ env.WORKING_DIR }}
          black --check . --exclude="venv|__pycache__|.git"
      
      - name: Run linting
        run: |
          cd ${{ env.WORKING_DIR }}
          flake8 . --max-line-length=120 --exclude=venv,__pycache__,.git,logs,data,models
      
      - name: Run health check
        run: |
          cd ${{ env.WORKING_DIR }}
          python health_check.py
      
      - name: Run framework tests
        run: |
          cd ${{ env.WORKING_DIR }}
          pytest test_framework_compliance.py -v || true
      
      - name: Test API endpoints
        run: |
          cd ${{ env.WORKING_DIR }}
          pytest test_esg_service.py -v || true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Build container image
        run: |
          cd ${{ env.WORKING_DIR }}
          docker build -t ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest .
          docker build -t ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
      
      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 3600
      
      - name: Push image to DigitalOcean Container Registry
        run: |
          docker push ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Clean up old registry images
        run: |
          # Keep only the latest 5 images to prevent quota issues
          echo "Cleaning up old images..."
          TAGS=$(doctl registry repository list-tags ${{ env.IMAGE_NAME }} --format Tag --no-header | tail -n +6)
          if [ ! -z "$TAGS" ]; then
            echo "$TAGS" | xargs -I {} doctl registry repository delete-tag ${{ env.IMAGE_NAME }} {} --force
            echo "Cleaned up old images"
          else
            echo "No old images to clean"
          fi

  deploy-app:
    needs: build-and-push
    runs-on: ubuntu-latest
    outputs:
      app_url: ${{ steps.get_url.outputs.url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Deploy to DigitalOcean App Platform
        run: |
          # Update app spec with new image
          sed -i "s|image_tag_placeholder|${{ github.sha }}|g" deployment/app.yaml
          
          # Deploy or create app
          if doctl apps list | grep -q "esg-scraper"; then
            APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep esg-scraper | awk '{print $1}')
            doctl apps update $APP_ID --spec deployment/app.yaml
          else
            doctl apps create --spec deployment/app.yaml
          fi
      
      - name: Get app URL
        id: get_url
        run: |
          # Wait for app to be created/updated
          echo "Waiting for app deployment to start..."
          sleep 30
          
          # Get app ID
          APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep esg-scraper | awk '{print $1}')
          echo "App ID: $APP_ID"
          
          # Get app details and extract URL
          echo "Getting app details..."
          # Use the LiveURL format directly since json format isn't supported
          APP_URL=$(doctl apps get $APP_ID --format LiveURL --no-header)
          
          # If empty, try to get the default ingress
          if [ -z "$APP_URL" ] || [ "$APP_URL" = "<nil>" ]; then
            echo "No LiveURL found, trying to get default ingress..."
            # Get the full app details and parse
            doctl apps get $APP_ID > app_details.txt
            
            # Try to extract the default ingress URL
            DEFAULT_INGRESS=$(doctl apps get $APP_ID --format DefaultIngress --no-header || echo "")
            
            if [ -n "$DEFAULT_INGRESS" ] && [ "$DEFAULT_INGRESS" != "<nil>" ]; then
              APP_URL="https://$DEFAULT_INGRESS"
            else
              # Fallback: construct from app ID
              echo "No default ingress found, constructing URL from app ID..."
              APP_URL="https://esg-scraper-$(echo $APP_ID | cut -c1-5).ondigitalocean.app"
            fi
          fi
          
          echo "App URL: $APP_URL"
          echo "url=$APP_URL" >> $GITHUB_OUTPUT

  health-check:
    needs: deploy-app
    runs-on: ubuntu-latest
    
    steps:
      - name: Wait for deployment
        run: |
          echo "Waiting for app deployment to complete..."
          echo "App URL: ${{ needs.deploy-app.outputs.app_url }}"
          echo "Waiting 3 minutes for deployment..."
          sleep 180
      
      - name: Check API health
        run: |
          # Try multiple endpoints to ensure deployment worked
          APP_URL="${{ needs.deploy-app.outputs.app_url }}"
          echo "Checking health at: $APP_URL/health"
          response=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL/health)
          if [ $response -eq 200 ]; then
            echo "✅ API health check passed"
          else
            echo "❌ API health check failed with status $response"
            exit 1
          fi
      
      - name: Test framework endpoint
        run: |
          APP_URL="${{ needs.deploy-app.outputs.app_url }}"
          response=$(curl -s $APP_URL/frameworks | jq -r '.frameworks | length')
          if [ "$response" -gt 0 ]; then
            echo "✅ Framework endpoint working - found $response frameworks"
          else
            echo "❌ Framework endpoint test failed"
            exit 1
          fi
      
      - name: Test analysis endpoint (basic)
        run: |
          APP_URL="${{ needs.deploy-app.outputs.app_url }}"
          # Register a test user and analyze simple content
          token=$(curl -s -X POST $APP_URL/auth/register \
            -H "Content-Type: application/json" \
            -d '{"email": "test@example.com"}' | jq -r '.token')
          
          if [ "$token" != "null" ] && [ -n "$token" ]; then
            echo "✅ User registration working"
            
            # Test analysis
            score=$(curl -s -X POST $APP_URL/analyze \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $token" \
              -d '{"text": "Our company is committed to reducing carbon emissions by 50% by 2030.", "quick_mode": true}' \
              | jq -r '.scores.overall')
            
            if [ "$score" != "null" ] && [ -n "$score" ]; then
              echo "✅ Analysis endpoint working - score: $score"
            else
              echo "❌ Analysis endpoint test failed"
              exit 1
            fi
          else
            echo "❌ User registration test failed"
            exit 1
          fi

  notify:
    needs: [deploy-app, health-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          # Only run if SLACK_WEBHOOK_URL is set in repository variables
          if [ -n "${{ vars.SLACK_WEBHOOK_URL || '' }}" ]; then
            APP_URL="${{ needs.deploy-app.outputs.app_url }}"
            if [ "${{ needs.health-check.result }}" = "success" ]; then
              curl -X POST ${{ vars.SLACK_WEBHOOK_URL }} \
                -H 'Content-type: application/json' \
                --data "{\"text\":\"✅ ESG Scraper deployed successfully!\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nURL: $APP_URL\"}"
            else
              curl -X POST ${{ vars.SLACK_WEBHOOK_URL }} \
                -H 'Content-type: application/json' \
                --data '{"text":"❌ ESG Scraper deployment failed!\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nCheck: https://github.com/${{ github.repository }}/actions"}'
            fi
          else
            echo "Slack webhook not configured, skipping notification"
          fi 