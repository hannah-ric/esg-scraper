name: Deploy ESG Scraper to DigitalOcean

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: esg-scraper

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio flake8 black
      
      - name: Check code formatting
        run: |
          black --check . --exclude="venv|__pycache__|.git"
      
      - name: Run linting
        run: |
          flake8 . --max-line-length=120 --exclude=venv,__pycache__,.git,logs,data,models
      
      - name: Run health check
        run: |
          python health_check.py
      
      - name: Run framework tests
        run: |
          pytest test_framework_compliance.py -v
      
      - name: Test API endpoints
        run: |
          pytest test_esg_service.py -v

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Build container image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest .
          docker build -t ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
      
      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200
      
      - name: Push image to DigitalOcean Container Registry
        run: |
          docker push ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-app:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Deploy to DigitalOcean App Platform
        run: |
          # Update app spec with new image
          sed -i "s|image_tag_placeholder|${{ github.sha }}|g" deployment/app.yaml
          
          # Deploy or create app
          if doctl apps list | grep -q "esg-scraper"; then
            APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep esg-scraper | awk '{print $1}')
            doctl apps update $APP_ID --spec deployment/app.yaml
          else
            doctl apps create --spec deployment/app.yaml
          fi

  health-check:
    needs: deploy-app
    runs-on: ubuntu-latest
    
    steps:
      - name: Wait for deployment
        run: sleep 120
      
      - name: Check API health
        run: |
          # Try multiple endpoints to ensure deployment worked
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.APP_URL }}/health)
          if [ $response -eq 200 ]; then
            echo "✅ API health check passed"
          else
            echo "❌ API health check failed with status $response"
            exit 1
          fi
      
      - name: Test framework endpoint
        run: |
          response=$(curl -s ${{ secrets.APP_URL }}/frameworks | jq -r '.frameworks | length')
          if [ "$response" -gt 0 ]; then
            echo "✅ Framework endpoint working - found $response frameworks"
          else
            echo "❌ Framework endpoint test failed"
            exit 1
          fi
      
      - name: Test analysis endpoint (basic)
        run: |
          # Register a test user and analyze simple content
          token=$(curl -s -X POST ${{ secrets.APP_URL }}/auth/register \
            -H "Content-Type: application/json" \
            -d '{"email": "test@example.com"}' | jq -r '.token')
          
          if [ "$token" != "null" ] && [ -n "$token" ]; then
            echo "✅ User registration working"
            
            # Test analysis
            score=$(curl -s -X POST ${{ secrets.APP_URL }}/analyze \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $token" \
              -d '{"text": "Our company is committed to reducing carbon emissions by 50% by 2030.", "quick_mode": true}' \
              | jq -r '.scores.overall')
            
            if [ "$score" != "null" ] && [ -n "$score" ]; then
              echo "✅ Analysis endpoint working - score: $score"
            else
              echo "❌ Analysis endpoint test failed"
              exit 1
            fi
          else
            echo "❌ User registration test failed"
            exit 1
          fi

  notify:
    needs: health-check
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
              -H 'Content-type: application/json' \
              --data '{"text":"✅ ESG Scraper deployed successfully!\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nURL: ${{ secrets.APP_URL }}"}'
          else
            curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
              -H 'Content-type: application/json' \
              --data '{"text":"❌ ESG Scraper deployment failed!\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nCheck: https://github.com/${{ github.repository }}/actions"}'
          fi 